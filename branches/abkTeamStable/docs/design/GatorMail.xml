<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
    <title>GatorMail Design</title>
    <chapter>
        <section>
            <title>Introduction</title>

            <para>
                This is the first draft of this document. Please be patient as
                we finish preparing GatorMail for public consumption.
            </para>

            <para>
                GatorMail webmail was developed to meet the needs of the
                University of Florida. The university's GatorLink email system
                is unusually large given the very limited hardware resources
                supporting the system. The university was also incuring high
                support costs using sub-optimial webmail solutions. Thus
                GatorMail was born out of William A. McArthur, Jr.'s frustration
                with the situation.
            </para>

            <para>
                GatorMail is design to be friendly in it's interaction the with
                the mail store backend and tread lightly when it can. It was
                also designed to be user friendly and require zero support. In
                GatorMail's current form it is very close to that goal.
            </para>

            <para>
                This guide is intended to describe GatorMail's design goals and
                an overview of the system.
            </para>
        </section>

        <section>
            <title>Design Goals</title>

            <para>
                There are some philosophical choices that have been made in
                order to make GatorMail a robust and stable webmail platform.
            </para>

            <section>
                <title>The User is King</title>

                <para>
                    The user interface of GatorMail is design to be simple,
                    straight forward, and intutive. Without happy users there is
                    no reason to develope a webmail. A suboptimal user interface
                    must be advoided when a better one is possible.
                </para>
            </section>

            <section>
                <title>Minimize State at all Costs</title>

                <para>
                    Application state is you're worst enemy when developing
                    web applications. The web browser is a very poor interface
                    for controling program flow. Users have come to expect that
                    they can move forwards and backwards and sideways within a
                    website and any assumptions you make about what the user
                    will do next will not hold up once users have access to the
                    system. State also complicates the design as it introduces
                    more corner cases when writing code.
                </para>
            </section>

        </section>

        <section>
            <title>Model View Controler</title>

            <para>
                The Model View Controler design paradigm, commonly refered to as
                MVC or JSP Model 2, was choosen for GatorMail.
            </para>

            <section>
                <title>The Model</title>

                <para>
                    JavaMail is largely the model that GatorMail uses. GatorMail
                    has really only been tested with the JavaMail 1.3 IMAP
                    implementation from Sun.
                </para>

                <para>
                    The address book is another aspect of the model which is
                    site specific.
                </para>
            </section>

            <section>
                <title>The Controler</title>

                <para>
                    The Jakarta Struts framework from the Apache Software
                    Foundataion was choosen to provide the controler framework
                    for GatorMail. Among other things the controler is
                    responsible for all intersting work and thus is the only
                    part which requries though about security.
                </para>
            </section>

            <section>
                <title>The View</title>

                <para>
                    The view, which are the JSPs, simply present information
                    handed to it from the controler. Only read-only operations
                    should happen in the view thus no forms of security checks
                    are needed.
                </para>
            </section>
        </section>

    </chapter>

    <chapter>
        <title>Installation</title>

        <section>
            <title>Requirements</title>

            <para>
                GatorMail will run in a Java Sevlet 2.2 container. The
                University of Florida's production servers run WebSphere 4 from
                IBM which GatorMail tested locally on Apache Tomcat 4. Apache
                Ant is requried to build GatorMail.
            </para>
        </section>

        <section>
            <title>Configuration</title>

            <para>
                Almost all configuration is done from the build.xml file in the
                package root and src/webapp/WEB-INF/struts-config.xml.
            </para>
        </section>

    </chapter>

</book>